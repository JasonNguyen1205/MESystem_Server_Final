@using Blazored.Toast.Configuration
@using MESystem.Data.Location

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SessionValues SessionValues
@inject IJSRuntime jsRuntime

<PageTitle>MESystem @SessionValues.PageName</PageTitle>

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />

<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if (IsMobileLayout)
            {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="content" />
            }
            else
            {
                <DxGridLayoutRow Areas="header header" Height="auto" />
                <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
            }
        </Rows>
        <Columns>
            @if (!IsMobileLayout)
            {
                <DxGridLayoutColumn Width="auto" />
                <DxGridLayoutColumn />
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" />
                </Template>
            </DxGridLayoutItem>
            @*<DxGridLayoutItem Area="sidebar">
                    <Template>
                        <NavMenu StateCssClass="@NavMenuCssClass" />
                    </Template>
                </DxGridLayoutItem>*@
            <DxGridLayoutItem Area="content" CssClass="content px-4">
                <Template>
                    @Body
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>

<BlazoredToasts Position="ToastPosition.BottomRight"
                IconType="IconType.FontAwesome"
                Timeout="20"
                ErrorIcon="fa-solid fa-rectangle-xmark"
                InfoIcon="fa-solid fa-info"
                SuccessIcon="fa-solid fa-thumbs-up"
                WarningIcon="fa-solid fa-triangle-exclamation"
                MaxToastCount="10"
                RemoveToastsOnNavigation="true"/>

@code{
    string NavMenuCssClass { get; set; }
    bool _isMobileLayout;

    bool IsMobileLayout
    {
        get => _isMobileLayout;
        set
        {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded
    {
        get => _isSidebarExpanded;
        set
        {
            if (_isSidebarExpanded != value)
            {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (IsMobileLayout)
        {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
